// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// send_SIGINT
bool send_SIGINT(long long unsigned pid);
RcppExport SEXP _rdaemon_send_SIGINT(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long unsigned >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(send_SIGINT(pid));
    return rcpp_result_gen;
END_RCPP
}
// detachConsole
void detachConsole();
RcppExport SEXP _rdaemon_detachConsole() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    detachConsole();
    return R_NilValue;
END_RCPP
}
// getNameMaxLen
unsigned int getNameMaxLen();
RcppExport SEXP _rdaemon_getNameMaxLen() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNameMaxLen());
    return rcpp_result_gen;
END_RCPP
}
// existsGlobalVariable
bool existsGlobalVariable(SEXP sharedMemoryName);
RcppExport SEXP _rdaemon_existsGlobalVariable(SEXP sharedMemoryNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sharedMemoryName(sharedMemoryNameSEXP);
    rcpp_result_gen = Rcpp::wrap(existsGlobalVariable(sharedMemoryName));
    return rcpp_result_gen;
END_RCPP
}
// setGlobalVariable
void setGlobalVariable(SEXP sharedMemoryName, int value);
RcppExport SEXP _rdaemon_setGlobalVariable(SEXP sharedMemoryNameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sharedMemoryName(sharedMemoryNameSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    setGlobalVariable(sharedMemoryName, value);
    return R_NilValue;
END_RCPP
}
// getGlobalVariable
int getGlobalVariable(SEXP sharedMemoryName);
RcppExport SEXP _rdaemon_getGlobalVariable(SEXP sharedMemoryNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sharedMemoryName(sharedMemoryNameSEXP);
    rcpp_result_gen = Rcpp::wrap(getGlobalVariable(sharedMemoryName));
    return rcpp_result_gen;
END_RCPP
}
// unsetGlobalVariable
void unsetGlobalVariable(SEXP sharedMemoryName);
RcppExport SEXP _rdaemon_unsetGlobalVariable(SEXP sharedMemoryNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sharedMemoryName(sharedMemoryNameSEXP);
    unsetGlobalVariable(sharedMemoryName);
    return R_NilValue;
END_RCPP
}
// isProcessRunning
bool isProcessRunning(long long unsigned pid);
RcppExport SEXP _rdaemon_isProcessRunning(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long unsigned >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(isProcessRunning(pid));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rdaemon_send_SIGINT", (DL_FUNC) &_rdaemon_send_SIGINT, 1},
    {"_rdaemon_detachConsole", (DL_FUNC) &_rdaemon_detachConsole, 0},
    {"_rdaemon_getNameMaxLen", (DL_FUNC) &_rdaemon_getNameMaxLen, 0},
    {"_rdaemon_existsGlobalVariable", (DL_FUNC) &_rdaemon_existsGlobalVariable, 1},
    {"_rdaemon_setGlobalVariable", (DL_FUNC) &_rdaemon_setGlobalVariable, 2},
    {"_rdaemon_getGlobalVariable", (DL_FUNC) &_rdaemon_getGlobalVariable, 1},
    {"_rdaemon_unsetGlobalVariable", (DL_FUNC) &_rdaemon_unsetGlobalVariable, 1},
    {"_rdaemon_isProcessRunning", (DL_FUNC) &_rdaemon_isProcessRunning, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rdaemon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
